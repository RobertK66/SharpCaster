name: Build AOT Executables

on:
  push:
    branches: [ main, version-3 ]
    tags: [ '[0-9]+.[0-9]+.[0-9]+*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    branches: [ main, version-3 ]
    inputs:
      build_all_platforms:
        description: 'Build for all platforms (otherwise Windows x64 only)'
        required: false
        default: false
        type: boolean
      force_release:
        description: 'Force create release (ignores tag requirement)'
        required: false
        default: false
        type: boolean
      release_version:
        description: 'Version for release (e.g., 3.1.0) - required if force_release is true'
        required: false
        type: string

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: ${{ !matrix.exclude_on_manual }}
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows
            arch: x64
            runner: windows-latest
            runtime: win-x64
            executable: sharpcaster.exe
          - os: windows
            arch: arm64
            runner: windows-latest
            runtime: win-arm64
            executable: sharpcaster.exe
            exclude_on_manual: ${{ github.event_name == 'workflow_dispatch' && !inputs.build_all_platforms }}

          # Linux builds  
          - os: linux
            arch: x64
            runner: ubuntu-latest
            runtime: linux-x64
            executable: sharpcaster
            exclude_on_manual: ${{ github.event_name == 'workflow_dispatch' && !inputs.build_all_platforms }}
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
            runtime: linux-arm64
            executable: sharpcaster
            exclude_on_manual: ${{ github.event_name == 'workflow_dispatch' && !inputs.build_all_platforms }}

          # macOS builds
          - os: macos
            arch: x64
            runner: macos-13  # Intel runner
            runtime: osx-x64
            executable: sharpcaster
            exclude_on_manual: ${{ github.event_name == 'workflow_dispatch' && !inputs.build_all_platforms }}
          - os: macos
            arch: arm64
            runner: macos-latest  # Apple Silicon runner
            runtime: osx-arm64
            executable: sharpcaster
            exclude_on_manual: ${{ github.event_name == 'workflow_dispatch' && !inputs.build_all_platforms }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # Platform-specific prerequisites
    - name: Install Linux dependencies
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang zlib1g-dev
       
    - name: Install macOS dependencies
      if: matrix.os == 'macos'
      run: |
        # Xcode command line tools should already be available on GitHub runners
        xcode-select --print-path || echo "Xcode tools not found, but may still work"

    - name: Restore dependencies
      run: dotnet restore SharpCaster.sln

    - name: Build AOT executable
      working-directory: SharpCaster.Console
      run: dotnet publish -r ${{ matrix.runtime }} -c Release --verbosity normal
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1

    - name: Rename executable (Windows)
      if: matrix.os == 'windows'
      working-directory: SharpCaster.Console
      run: |
        $publishDir = "bin/Release/net9.0/${{ matrix.runtime }}/publish"
        if (Test-Path "$publishDir/SharpCaster.Console.exe") {
          Rename-Item "$publishDir/SharpCaster.Console.exe" "${{ matrix.executable }}"
          Write-Host "✓ Renamed SharpCaster.Console.exe to ${{ matrix.executable }}"
        } else {
          Write-Host "✗ Could not find SharpCaster.Console.exe to rename"
          Get-ChildItem $publishDir
          exit 1
        }
      shell: pwsh

    - name: Rename executable (Unix)
      if: matrix.os != 'windows'
      working-directory: SharpCaster.Console
      run: |
        publishDir="bin/Release/net9.0/${{ matrix.runtime }}/publish"
        if [ -f "$publishDir/SharpCaster.Console" ]; then
          mv "$publishDir/SharpCaster.Console" "$publishDir/${{ matrix.executable }}"
          echo "✓ Renamed SharpCaster.Console to ${{ matrix.executable }}"
        else
          echo "✗ Could not find SharpCaster.Console to rename"
          ls -la "$publishDir"
          exit 1
        fi

    - name: Verify executable
      working-directory: SharpCaster.Console
      run: |
        $exePath = "bin/Release/net9.0/${{ matrix.runtime }}/publish/${{ matrix.executable }}"
        if (Test-Path $exePath) {
          Write-Host "✓ Executable found at: $exePath"
          $sizeMB = [math]::Round((Get-Item $exePath).Length / 1MB, 2)
          Write-Host "✓ Size: $sizeMB MB"
          echo "ARTIFACT_SIZE=$sizeMB" >> $env:GITHUB_ENV
        } else {
          Write-Host "✗ Executable not found at: $exePath"
          Write-Host "Contents of publish directory:"
          Get-ChildItem "bin/Release/net9.0/${{ matrix.runtime }}/publish/" -ErrorAction SilentlyContinue | Format-Table Name, Length
          exit 1
        }
      shell: pwsh

    - name: Prepare artifact
      working-directory: SharpCaster.Console
      run: |
        $publishDir = "bin/Release/net9.0/${{ matrix.runtime }}/publish"
        $artifactDir = "artifact-${{ matrix.runtime }}"
        
        # Create artifact directory
        New-Item -ItemType Directory -Force -Path $artifactDir
        
        # Copy executable and any required files
        Copy-Item "$publishDir/${{ matrix.executable }}" "$artifactDir/"
        
        # Create info file
        $content = "SharpCaster Console - AOT Build`n"
        $content += "===============================`n"
        $content += "Platform: ${{ matrix.os }} ${{ matrix.arch }}`n"
        $content += "Runtime: ${{ matrix.runtime }}`n"
        $content += "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n"
        $content += "Commit: $env:GITHUB_SHA`n"
        $content += "Branch: $env:GITHUB_REF_NAME`n`n"
        $content += "Usage:`n"
        $content += "------`n"
        $content += "# Interactive mode`n"
        $content += "./${{ matrix.executable }}`n`n"
        $content += "# Command-line mode`n"
        $content += "./${{ matrix.executable }} `"device-name`" play `"https://example.com/video.mp4`"`n"
        $content += "./${{ matrix.executable }} help`n`n"
        $content += "For more information, see: https://github.com/Tapanila/SharpCaster"
        $content | Out-File -FilePath "$artifactDir/README.txt" -Encoding UTF8
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: SharpCaster-Console-${{ matrix.runtime }}-${{ env.ARTIFACT_SIZE }}MB
        path: SharpCaster.Console/artifact-${{ matrix.runtime }}/
        retention-days: 30

  # Create release if this is a tag or forced via manual dispatch
  release:
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.force_release)
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Set version variable
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ inputs.force_release }}" == "true" ]; then
          if [ -z "${{ inputs.release_version }}" ]; then
            echo "Error: release_version is required when force_release is true"
            exit 1
          fi
          echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV
        else
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        fi
        echo "Using version: $VERSION"

    - name: Prepare release assets
      run: |
        cd artifacts
        for dir in SharpCaster-Console-*/; do
          runtime=$(echo "$dir" | sed 's/SharpCaster-Console-\(.*\)-.*MB\//\1/')
          echo "Processing $runtime from $dir"
          
          cd "$dir"
          if [[ "$runtime" == win-* ]]; then
            # Windows - copy .exe directly with renamed filename
            if [[ "$runtime" == "win-x64" ]]; then
              cp sharpcaster.exe "../sharpcaster-win-x64.exe"
            elif [[ "$runtime" == "win-arm64" ]]; then
              cp sharpcaster.exe "../sharpcaster-win-arm.exe"
            fi
          else
            # Linux/macOS - create tar.gz
            tar -czf "../SharpCaster-Console-${runtime}.tar.gz" .
          fi
          cd ..
        done
        
        # List created files
        ls -la *.exe *.tar.gz

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: SharpCaster v${{ env.VERSION }}
        files: |
          artifacts/*.exe
          artifacts/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## SharpCaster Console AOT Builds
          
          Self-contained native executables for all supported platforms.
          No .NET runtime installation required!
          
          ### Downloads:
          - **Windows x64**: `sharpcaster-win-x64.exe`
          - **Windows ARM64**: `sharpcaster-win-arm.exe`
          - **Linux x64**: `SharpCaster-Console-linux-x64.tar.gz`
          - **Linux ARM64**: `SharpCaster-Console-linux-arm64.tar.gz`
          - **macOS Intel**: `SharpCaster-Console-osx-x64.tar.gz`
          - **macOS Apple Silicon**: `SharpCaster-Console-osx-arm64.tar.gz`
          
          ### Usage:
          ```bash
          # Interactive mode
          ./sharpcaster
          
          # Command-line mode
          ./sharpcaster "Living Room TV" play "https://example.com/video.mp4"
          ```
          
          For detailed usage instructions, see the README.txt file included in each download.

    # Publish to Chocolatey
    - name: Update Chocolatey package with dynamic checksums
      run: |
        echo "Publishing version: $VERSION"
        
        # Calculate checksums for the new .exe files
        X64_CHECKSUM=$(sha256sum artifacts/sharpcaster-win-x64.exe | cut -d' ' -f1 | tr '[:lower:]' '[:upper:]')
        ARM_CHECKSUM=$(sha256sum artifacts/sharpcaster-win-arm.exe | cut -d' ' -f1 | tr '[:lower:]' '[:upper:]')
        
        echo "x64 checksum: $X64_CHECKSUM"
        echo "ARM checksum: $ARM_CHECKSUM"
        
        # Update nuspec version
        sed -i "s/<version>.*<\/version>/<version>$VERSION<\/version>/" chocolatey/sharpcaster.nuspec
        
        # Update chocolateyinstall.ps1 with new version and checksums
        sed -i "s|3.0.0-beta1|$VERSION|g" chocolatey/tools/chocolateyinstall.ps1
        sed -i "s/96BADBF9CFF4D21B31773388EEDC345FD0807B4922A34271097896030FBBB24E/$ARM_CHECKSUM/" chocolatey/tools/chocolateyinstall.ps1
        sed -i "s/3E62F16C9663FD1674AFC9F685F0F250CC5F7643A4F4DFAA82678D534DE8B084/$X64_CHECKSUM/" chocolatey/tools/chocolateyinstall.ps1

    - name: Pack and publish Chocolatey package
      run: |
        cd chocolatey
        
        # Install mono and nuget for Chocolatey packaging
        sudo apt-get update
        sudo apt-get install -y mono-complete wget
        
        # Download nuget.exe and pack
        wget -q https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
        mono nuget.exe pack sharpcaster.nuspec
        
        # Upload to Chocolatey using curl
        curl -X PUT "https://push.chocolatey.org/api/v2/package" \
             -H "X-NuGet-ApiKey: ${{ secrets.CHOCOLATEY_API_KEY }}" \
             -F "package=@sharpcaster.$VERSION.nupkg"
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}