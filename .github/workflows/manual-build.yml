name: Manual Windows x64 Build

on:
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Create release with this build'
        required: false
        default: false
        type: boolean
      release_version:
        description: 'Version for release (e.g., 3.1.0) - required if force_release is true'
        required: false
        type: string

jobs:
  build:
    name: Build Windows x64
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore SharpCaster.sln

    - name: Build AOT executable
      working-directory: SharpCaster.Console
      run: dotnet publish -r win-x64 -c Release --verbosity normal
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1

    - name: Rename executable
      working-directory: SharpCaster.Console
      run: |
        $publishDir = "bin/Release/net9.0/win-x64/publish"
        if (Test-Path "$publishDir/SharpCaster.Console.exe") {
          Rename-Item "$publishDir/SharpCaster.Console.exe" "sharpcaster.exe"
          Write-Host "✓ Renamed SharpCaster.Console.exe to sharpcaster.exe"
        } else {
          Write-Host "✗ Could not find SharpCaster.Console.exe to rename"
          Get-ChildItem $publishDir
          exit 1
        }
      shell: pwsh

    - name: Verify executable
      working-directory: SharpCaster.Console
      run: |
        $exePath = "bin/Release/net9.0/win-x64/publish/sharpcaster.exe"
        if (Test-Path $exePath) {
          Write-Host "✓ Executable found at: $exePath"
          $sizeMB = [math]::Round((Get-Item $exePath).Length / 1MB, 2)
          Write-Host "✓ Size: $sizeMB MB"
          echo "ARTIFACT_SIZE=$sizeMB" >> $env:GITHUB_ENV
        } else {
          Write-Host "✗ Executable not found at: $exePath"
          exit 1
        }
      shell: pwsh

    - name: Prepare artifact
      working-directory: SharpCaster.Console
      run: |
        $publishDir = "bin/Release/net9.0/win-x64/publish"
        $artifactDir = "artifact-win-x64"
        
        # Create artifact directory
        New-Item -ItemType Directory -Force -Path $artifactDir
        
        # Copy executable
        Copy-Item "$publishDir/sharpcaster.exe" "$artifactDir/"
        
        # Create info file
        $content = "SharpCaster Console - Windows x64 AOT Build`n"
        $content += "==========================================`n"
        $content += "Platform: Windows x64`n"
        $content += "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n"
        $content += "Commit: $env:GITHUB_SHA`n"
        $content += "Branch: $env:GITHUB_REF_NAME`n`n"
        $content += "Usage:`n"
        $content += "------`n"
        $content += "# Interactive mode`n"
        $content += ".\sharpcaster.exe`n`n"
        $content += "# Command-line mode`n"
        $content += ".\sharpcaster.exe `"device-name`" play `"https://example.com/video.mp4`"`n"
        $content += ".\sharpcaster.exe help`n`n"
        $content += "For more information, see: https://github.com/Tapanila/SharpCaster"
        $content | Out-File -FilePath "$artifactDir/README.txt" -Encoding UTF8
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: SharpCaster-Console-win-x64-${{ env.ARTIFACT_SIZE }}MB
        path: SharpCaster.Console/artifact-win-x64/
        retention-days: 30

  # Create release if requested
  release:
    if: inputs.force_release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set version variable
      run: |
        if [ -z "${{ inputs.release_version }}" ]; then
          echo "Error: release_version is required when force_release is true"
          exit 1
        fi
        echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV
        echo "Using version: ${{ inputs.release_version }}"

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release asset
      run: |
        cd artifacts
        # Find the artifact directory
        artifact_dir=$(find . -name "SharpCaster-Console-win-x64-*" -type d | head -1)
        if [ -n "$artifact_dir" ]; then
          cd "$artifact_dir"
          cp sharpcaster.exe "../sharpcaster-win-x64.exe"
          echo "✓ Prepared sharpcaster-win-x64.exe for release"
        else
          echo "✗ Could not find Windows x64 artifact"
          exit 1
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: SharpCaster v${{ env.VERSION }} (Manual Build)
        files: |
          artifacts/sharpcaster-win-x64.exe
        draft: false
        prerelease: true
        generate_release_notes: true
        body: |
          ## SharpCaster Console Windows x64 Build
          
          Self-contained native executable for Windows x64.
          No .NET runtime installation required!
          
          ### Usage:
          ```cmd
          # Interactive mode
          sharpcaster-win-x64.exe
          
          # Command-line mode
          sharpcaster-win-x64.exe "Living Room TV" play "https://example.com/video.mp4"
          ```
          
          This is a manual build containing only the Windows x64 version.

    # Publish to Chocolatey
    - name: Update Chocolatey package with dynamic checksums
      run: |
        echo "Publishing version: $VERSION"
        
        # Calculate checksum for the Windows x64 exe
        X64_CHECKSUM=$(sha256sum artifacts/sharpcaster-win-x64.exe | cut -d' ' -f1 | tr '[:lower:]' '[:upper:]')
        echo "x64 checksum: $X64_CHECKSUM"
        
        # Update nuspec version
        sed -i "s/<version>.*<\/version>/<version>$VERSION<\/version>/" chocolatey/sharpcaster.nuspec
        
        # Update chocolateyinstall.ps1 with new version and checksum
        sed -i "s|3.0.0-beta1|$VERSION|g" chocolatey/tools/chocolateyinstall.ps1
        sed -i "s/3E62F16C9663FD1674AFC9F685F0F250CC5F7643A4F4DFAA82678D534DE8B084/$X64_CHECKSUM/" chocolatey/tools/chocolateyinstall.ps1

    - name: Pack and publish Chocolatey package
      run: |
        cd chocolatey
        
        # Install mono and nuget for Chocolatey packaging
        sudo apt-get update
        sudo apt-get install -y mono-complete wget
        
        # Download nuget.exe and pack
        wget -q https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
        mono nuget.exe pack sharpcaster.nuspec
        
        # Upload to Chocolatey using curl
        curl -X PUT "https://push.chocolatey.org/api/v2/package" \
             -H "X-NuGet-ApiKey: ${{ secrets.CHOCOLATEY_API_KEY }}" \
             -F "package=@sharpcaster.$VERSION.nupkg"
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}